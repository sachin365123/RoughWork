# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: 

# dataset = pandas.DataFrame(Marks)
# dataset = dataset.drop_duplicates()

# Paste or type your script code here:
# Import libraries

import pandas as pd
from scipy.stats import skew
import matplotlib.pyplot as plt
import numpy as np


# Your data
data = dataset['Marks']

# create histogram with specific bin sizes
plt.hist(data, bins=[0, 20, 40, 60, 80, 100])

# Calculate the width of each bin
bin_width = 20  # Assuming equal bin widths for this example

# Calculate the positions of ticks at the middle of each bin
bin_centers = [bin_edge + bin_width / 2 for bin_edge in [0, 20, 40, 60, 80]]

# set custom labels for x ticks at the center of each bin
plt.xticks(bin_centers, ['0-19', '20-39', '40-59', '60-79', '80-99'])

# add labels and title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram Example')

# Calculate skewness
skewness = skew(data)

# Calculate mean, median, and mode
mean_value = np.mean(data)
median_value = np.median(data)
mode_value = data.mode().values[0]

# Label skewness
if skewness > 0:
    plt.text(plt.xlim()[1], plt.ylim()[1], f'\n\n\n\n\nPositive Skewness ({skewness:.2f})', ha='right', va='top',fontsize=25)
elif skewness < 0:
    plt.text(plt.xlim()[1], plt.ylim()[1], f'\n\n\n\n\nNegative Skewness ({skewness:.2f})', ha='right', va='top',fontsize=25)
else:
    plt.text(plt.xlim()[1], plt.ylim()[1], f'\n\n\n\n\nSymmetric Distribution ({skewness:.2f})', ha='right', va='top',fontsize=25)

# Add vertical bars for mean, median, and mode
plt.axvline(mean_value, color='red', linestyle='--', label=f'Mean ({mean_value:.2f})', linewidth=2)
plt.axvline(median_value, color='blue', linestyle='--', label=f'Median ({median_value:.2f})', linewidth=2)
plt.axvline(mode_value, color='purple', linestyle='--', label=f'Mode ({mode_value:.2f})', linewidth=2)


# Display mean, median, and mode values at the top right corner of the graph
plt.text(plt.xlim()[1], plt.ylim()[1], f'Mean: {mean_value:.2f}\nMedian: {median_value:.2f}\nMode: {mode_value:.2f}',
         ha='right', va='top', fontsize=20)


# Get the counts for each bin
counts, _ = np.histogram(data, bins=[0, 20, 40, 60, 80, 100])

# Write counts on top of each bar
for i, count in enumerate(counts):
    plt.text(bin_centers[i], count, str(count), ha='center', va='bottom', fontsize=12)


# display histogram
plt.show()







